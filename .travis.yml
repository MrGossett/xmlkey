language: go

go:
  - 1.4
  - 1.5

before_install:
  - if go get github.com/alecthomas/gometalinter; then gometalinter --install --update; fi
  - go get github.com/axw/gocov/gocov
  - go get github.com/mattn/goveralls
  - if ! go get code.google.com/p/go.tools/cmd/cover; then go get golang.org/x/tools/cmd/cover; fi

install:
  - go build -o xmlkey ./cli

script:
  - gometalinter -D gotype ./...
  - go get -t
  - $HOME/gopath/bin/goveralls -service=travis-ci -repotoken=$COVERALLS -v

after_script:
  - gocyclo -over 15 . || true
  - |
    if [[ "$TRAVIS_PULL_REQUEST" == "false" ]] && [[ "$TRAVIS_BRANCH" == "master" ]]; then
      go list ./... | xargs -n 1 -I{} curl http://godoc.org/-/refresh -d path={}
    fi

before_deploy:
  - PLATFORMS=(darwin/386 darwin/amd64 freebsd/386 freebsd/amd64 freebsd/arm linux/386 linux/amd64 linux/arm windows/386 windows/amd64)

 # build binary for all archs
  - |
    for PLATFORM in "${PLATFORMS[@]}"; do
      echo "Building $PLATFORM"
      GOOS=${PLATFORM%/*}
      GOARCH=${PLATFORM#*/}
      if [ "$GOOS" = "windows" ]; then
        build_cmd="GOOS=$GOOS GOARCH=$GOARCH go build -o xmlkey -ldflags '-w -s'"
      else
        build_cmd="CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -o xmlkey -ldflags '-d -w -s'"
      fi
      if ! eval $build_cmd; then
        echo "Failed building xmlkey for $PLATFORM" && return 1
      fi
      if [ "$GOOS" = "windows" ]; then
        zip xmlkey-${GOOS}-${GOARCH}.zip xmlkey
      else
        tar cvzf xmlkey-${GOOS}-${GOARCH}.tgz xmlkey
      fi
    done

  - ls

deploy:
  provider: releases
  api_key: $AUTH_TOKEN
  file:
    - "xmlkey-darwin-386.tgz"
    - "xmlkey-darwin-amd64.tgz"

    - "xmlkey-freebsd-386.tgz"
    - "xmlkey-freebsd-arm.tgz"
    - "xmlkey-freebsd-amd64.tgz"

    - "xmlkey-linux-386.tgz"
    - "xmlkey-linux-arm.tgz"
    - "xmlkey-linux-amd64.tgz"

    - "xmlkey-windows-386.zip"
    - "xmlkey-windows-amd64.zip"

  skip_cleanup: true
  on:
    tags: true
    condition: "$TRAVIS_GO_VERSION == go1.5*"